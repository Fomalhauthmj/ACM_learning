{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"最大公约数": {
		"prefix": "GCD",
		"body": [
			"long long GCD(long long a,long long b)",
			"{",
			"    if(b==0) return a;",
			"    else return GCD(b,a%b);",
			"}",
		],
		"description": "最大公约数"
	},
	"快速幂":{
		"prefix": "Quick_pow",
		"body": [
			"long long quick_pow(long long a,long long b)",
			"{",
			"    if(b==0)    return 1;",
			"    long long temp=quick_pow(a,b>>1);",
			"    if(b&1)    return a%mod*temp%mod*temp%mod;",
			"    else    return temp%mod*temp%mod;//快速幂",
			"}",
		],
		"description": "快速幂"
	},
	"二分搜索":{
		"prefix": "Binary_search",
		"body": [
			"long long left=1;",
			"long long right=inf;",
			"long long mid;",
			"while(left<=right)",
			"{",
			"    mid=(left+right)/2;",
			"}",
		],
		"description": "二分搜索"
	},
	"快速开始":{
		"prefix": "Quick_start",
		"body":[
			"#include<iostream>",
			"using namespace std;",
			"int main()",
			"{",
    		"    ios::sync_with_stdio(false);",
    		"    cin.tie(0);",
			"}",
		],
		"description": "快速开始",
	},
	"阶乘逆元_组合数取模":{
		"prefix": "fac_inv_C",
		"body":[
			"ll fac[N];//阶乘",
			"ll inv[N];//阶乘逆元",
			"ll C(ll a,ll b)",
			"{",
			"    if(b>a) return 0;",
			"    if(b==0) return 1;",
			"    return fac[a]*inv[b]%mod*inv[a-b]%mod;",
			"}",
			"void init()",
			"{",
			"    fac[0]=1;",
			"    for(int i=1;i<N;i++)",
			"    {",
			"        fac[i]=(fac[i-1]*i)%mod;",
			"    }",
			"    inv[N-1]=quick_pow(fac[N-1],mod-2);//费马小定理 求逆元a^(p-1)%p=1 a的逆元为a^(p-2)",
			"    //如果 ax%p=1 ， 那么x的最小正整数解就是 a 模p的逆元",
			"    for(int i=N-2;i>=0;i--)",
			"    {",
			"        inv[i]=inv[i+1]*(i+1)%mod;",
			"    }",
			"}",
		],
		"description": "阶乘逆元_组合数取模",
	}
}
